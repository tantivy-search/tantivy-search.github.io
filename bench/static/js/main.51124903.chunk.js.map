{"version":3,"sources":["serviceWorker.js","index.js"],"names":["Boolean","window","location","hostname","match","numberWithCommas","x","toString","pattern","test","replace","aggregate","query","duration","length","className","unsupported","timings","res","reduce","pv","cv","count","stats_row","engines","name","stat","Object","entries","map","kv","engine","engine_stats","undefined","key","Benchmark","props","state","mode","tag","evt","this","setState","target","value","queries","filter","tags","indexOf","details","data","mode_data","results","engine_queries","Array","from","filterQueries","total","p50","p90","p99","all_latencies","min","push","sort","a","b","Math","round","query_data","min_engine","min_microsecs","max_engine","max_microsecs","engine_data","variation","data_view","generateDataView","htmlFor","id","onChange","handleChangeMode","modes","handleChangeTag","keys","engine_details","detail","p","cell_data","toFixed","React","Component","$","getJSON","tags_set","Set","add","el","document","getElementById","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.51124903.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport $ from 'jquery';\nimport ReactDOM from 'react-dom';\nimport './style.scss'\nimport * as serviceWorker from './serviceWorker';\n\nfunction formatPercentVariation(p) {\n  if (p !== undefined) {\n    return \"+\" + (p * 100).toFixed(1) + \" %\";\n  } else {\n    return \"\";\n  }\n}\n\nfunction numberWithCommas(x) {\n  x = x.toString();\n  let pattern = /(-?\\d+)(\\d{3})/\n  while (pattern.test(x)) {\n    x = x.replace(pattern, \"$1,$2\");\n  }\n  return x;\n}\n\nfunction stats(timings) {\n  let median = timings[(timings.length / 2) | 0];\n  let mean = timings.reduce(((pv, cv) => pv + cv), 0) / timings.length;\n  return {\n    \"median\": median,\n    \"mean\": mean,\n    \"min\": timings[0],\n    \"max\": timings[timings.length - 1]\n  };\n}\n\nfunction aggregate(query) {\n  if (query.duration.length === 0) {\n    return { query: query.query, className: \"unsupported\", unsupported: true }\n  }\n  var res = stats(query.duration);\n  res.count = query.count;\n  res.query = query.query;\n  return res;\n}\n\nfunction stats_row(engines, name, className, stat) {\n  return <tr className={className + \"-row\"}>\n            <td>{name}</td>\n            {\n              Object.entries(engines).map(kv => {\n                var engine = kv[0];\n                var engine_stats = kv[1];\n                if (engine_stats !== undefined) {\n                  return <td key={\"result-\" + engine}>\n                    {numberWithCommas(engine_stats[stat])} μs\n                </td>;\n                } else {\n                  return <td key={\"result-\" + engine}>\n                    Some Unsupported Queries\n                </td>;\n                }\n              })\n            }\n          </tr>;\n}\n\nfunction details_list(engine_details) {\n  return <ul className=\"details\">\n    {\n      engine_details.map(detail => {\n        return <li>{detail}</li>;\n      })\n    }\n    </ul>;\n}\n\nclass Benchmark extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      mode: \"TOP_10\",\n      tag: null\n    };\n  }\n\n  handleChangeMode(evt) {\n    this.setState({ mode: evt.target.value });\n  }\n\n  handleChangeTag(evt) {\n    var tag = evt.target.value;\n    if (tag === \"ALL\") {\n      this.setState({ \"tag\": null });\n    } else {\n      this.setState({ \"tag\": tag });\n    }\n  }\n\n  filterQueries(queries) {\n    let tag = this.state.tag;\n    if (tag !== null) {\n      return queries.filter(query => query.tags.indexOf(tag) >= 0);\n    } else {\n      return queries;\n    }\n  }\n\n  generateDataView() {\n    var engines = {}\n    var queries = {}\n    var details = this.props.data.details;\n    var mode_data = this.props.data.results[this.state.mode];\n    for (var engine in mode_data) {\n      var engine_queries = mode_data[engine];\n      engine_queries = Array.from(this.filterQueries(engine_queries));\n      engine_queries = engine_queries.map(aggregate);\n      var total = 0\n      var p50 = 0\n      var p90 = 0\n      var p99 = 0\n      var unsupported = false\n      var all_latencies = []\n      for (var query of engine_queries) {\n        if (query.unsupported) {\n          unsupported = true;\n        } else {\n          total += query.min;\n          all_latencies.push(query.min);\n        }\n      }\n      if (unsupported) {\n        total = undefined;\n        p50 = undefined;\n        p90 = undefined;\n        p99 = undefined;\n      } else {\n        total = (total / engine_queries.length) | 0;\n        if (all_latencies.length !== 0) {\n          all_latencies.sort(function(a, b) { return a - b; });\n          p50 = all_latencies[Math.round((all_latencies.length - 1) * 0.5)];\n          p90 = all_latencies[Math.round((all_latencies.length - 1) * 0.9)];\n          p99 = all_latencies[Math.round((all_latencies.length - 1) * 0.99)];\n        }\n      }\n      engines[engine] = unsupported ? undefined : { \"average\": total, \"p50\": p50, \"p90\": p90, \"p99\": p99 };\n      for (let query of engine_queries) {\n        var query_data = {};\n        if (queries[query.query] !== undefined) {\n          query_data = queries[query.query];\n        }\n        query_data[engine] = query\n        queries[query.query] = query_data\n      }\n    }\n\n    for (let query in queries) {\n      let query_data = queries[query];\n      var min_engine = null;\n      var min_microsecs = 0;\n      var max_engine = null;\n      var max_microsecs = 0;\n      for (let engine in query_data) {\n        var engine_data = query_data[engine];\n        if (engine_data.unsupported)\n          continue;\n        if (min_engine == null || engine_data.min < min_microsecs) {\n          min_engine = engine;\n          min_microsecs = engine_data.min;\n        }\n        if (max_engine == null || engine_data.min > max_microsecs) {\n          max_engine = engine;\n          max_microsecs = engine_data.min;\n        }\n      }\n      for (let engine in query_data) {\n        let engine_data = query_data[engine];\n        if (engine_data.unsupported) continue;\n        if (engine !== min_engine) {\n          engine_data.variation = (engine_data.min - min_microsecs) / min_microsecs;\n        }\n      }\n      if (min_engine != null) {\n        // Only useful if at least one engine supports this query \n        query_data[min_engine].className = \"fastest\";\n        query_data[max_engine].className = \"slowest\";\n      }\n    }\n    return { engines, queries, details };\n  }\n\n  render() {\n    var data_view = this.generateDataView();\n    return <div>\n      <form>\n        <fieldset>\n          <label htmlFor=\"collectionField\">Collection type</label>\n          <select id=\"collectionField\" onChange={evt => this.handleChangeMode(evt)}>\n            {this.props.modes.map((mode) => <option value={mode} key={mode}>{mode}</option>)}\n          </select>\n          <label htmlFor=\"queryTagField\">Type of Query</label>\n          <select id=\"queryTagField\" onChange={(evt) => this.handleChangeTag(evt)}>\n            <option value=\"ALL\" key=\"all\">ALL</option>\n            {this.props.tags.map((tag) => <option value={tag} key={tag}>{tag}</option>)}\n          </select>\n        </fieldset>\n      </form>\n      <hr />\n      <table>\n        <thead>\n          <tr>\n            <th>Query</th>\n            {\n              Object.keys(data_view.engines).map((engine) => <th key={\"col-\" + engine}><details><summary>{engine}</summary>{ details_list(data_view.details[engine]) }</details></th>)\n            }\n          </tr>\n        </thead>\n        <tbody>\n          { stats_row(data_view.engines, \"AVERAGE\", \"average\", \"average\") }\n          { stats_row(data_view.engines, \"P50\", \"percentile\", \"p50\") }\n          { stats_row(data_view.engines, \"P90\", \"percentile\", \"p90\") }\n          { stats_row(data_view.engines, \"P99\", \"percentile\", \"p99\") }\n          {\n            Object.entries(data_view.queries).map(kv => {\n              var query = kv[0];\n              var engine_queries = kv[1];\n              return <tr>\n                <td>{query}</td>\n                {\n                  Object.keys(data_view.engines).map(engine => {\n                    var cell_data = engine_queries[engine];\n                    if (cell_data.unsupported) {\n                      return <td className={\"data \" + cell_data.className}></td>;\n                    } else {\n                      return <td className={\"data \" + cell_data.className}>\n                        <div className=\"timing\">{numberWithCommas(cell_data.min)}  μs</div>\n                        <div className=\"timing-variation\">{formatPercentVariation(cell_data.variation)}</div>\n                        <div className=\"count\">{numberWithCommas(cell_data.count)} docs</div>\n                      </td>;\n                    }\n                  })\n                }\n              </tr>\n            })\n          }\n        </tbody>\n      </table>\n    </div>;\n  }\n\n}\n\n$(function () {\n  $.getJSON(process.env.PUBLIC_URL + \"/results.json\", (data) => {\n    var modes = [];\n    var engines = [];\n    var tags_set = new Set();\n    for (var mode in data.results) {\n      modes.push(mode);\n    }\n    for (var engine in data.results[modes[0]]) {\n      engines.push(engine);\n    }\n    for (var query of data.results[modes[0]][engines[0]]) {\n      for (var tag of query.tags) {\n        tags_set.add(tag);\n      }\n    }\n    var tags = Array.from(tags_set);\n    tags.sort();\n    var el = document.getElementById(\"app-container\");\n    ReactDOM.render(<React.StrictMode>\n      <Benchmark data={data} tags={tags} modes={modes} engines={engines} />\n    </React.StrictMode>, el);\n  });\n});\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}